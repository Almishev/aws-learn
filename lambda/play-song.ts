import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, ScanCommand, UpdateCommand } from '@aws-sdk/lib-dynamodb';
import { SNSClient, PublishCommand } from '@aws-sdk/client-sns';

const dynamoClient = new DynamoDBClient({});
const docClient = DynamoDBDocumentClient.from(dynamoClient);
const snsClient = new SNSClient({});

export const handler = async (): Promise<void> => {
  try {
    const now = new Date().toISOString();
    
    // –¢—ä—Ä—Å–∏–º –ø–µ—Å–Ω–∏, –∫–æ–∏—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –ø—É—Å–Ω–∞—Ç —Å–µ–≥–∞ (–∏–∑–ø–æ–ª–∑–≤–∞–º–µ Scan —Å filter)
    const response = await docClient.send(new ScanCommand({
      TableName: process.env.SONGS_TABLE,
      FilterExpression: 'status = :status AND playAt <= :now',
      ExpressionAttributeValues: {
        ':status': 'scheduled',
        ':now': now,
      },
    }));

    if (!response.Items || response.Items.length === 0) {
      console.log('No songs to play at this time');
      return;
    }

    console.log(`Found ${response.Items.length} songs to play`);

    // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –≤—Å—è–∫–∞ –ø–µ—Å–µ–Ω
    for (const song of response.Items) {
      try {
        // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "played"
        await docClient.send(new UpdateCommand({
          TableName: process.env.SONGS_TABLE,
          Key: {
            PK: song.PK,
            SK: song.SK,
          },
          UpdateExpression: 'SET status = :status, playedAt = :playedAt',
          ExpressionAttributeValues: {
            ':status': 'played',
            ':playedAt': now,
          },
        }));

        // –ò–∑–ø—Ä–∞—â–∞–º–µ –∏–∑–≤–µ—Å—Ç–∏–µ —á—Ä–µ–∑ SNS
        const message = {
          subject: 'üéµ –í—Ä–µ–º–µ –µ –∑–∞ –Ω–æ–≤–∞ –ø–µ—Å–µ–Ω!',
          body: `–ü–µ—Å–µ–Ω: ${song.title}\n–ò–∑–ø—ä–ª–Ω–∏—Ç–µ–ª: ${song.artist}\n–í—Ä–µ–º–µ –∑–∞ –ø—É—Å–∫–∞–Ω–µ: ${song.playAt}`,
        };

        await snsClient.send(new PublishCommand({
          TopicArn: process.env.NOTIFICATION_TOPIC_ARN,
          Subject: message.subject,
          Message: message.body,
        }));

        console.log(`Song "${song.title}" by ${song.artist} marked as played and notification sent`);

      } catch (error) {
        console.error(`Error processing song ${song.id}:`, error);
        // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ —Å —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ –ø–µ—Å–µ–Ω
      }
    }

  } catch (error) {
    console.error('Error in play-song handler:', error);
    throw error;
  }
}; 